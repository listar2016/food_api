"A datetime string with format 'Y-m-d H:i:s', e.g. '2018-01-01 13:00:00'."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format 'Y-m-d', e.g. '2011-05-23'."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec" 
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

#import ./admin/index.graphql
#import ./user/index.graphql

type AuthTokenPayload {
  msg: String
  token_type: String
  expires_in: String
  access_token: String
  refresh_token: String
}

type AuthUserPayload {
  id: ID
  email: String
  first_name: String
  last_name: String
}

type Query {
  authUser: AuthUserPayload! @middleware(checks: ["auth:admin,api"]) @field(resolver: "AuthUser@resolve")
}

type Mutation {
  authToken(
    appID: String @rules(apply: ["required", "string"])
    appSecret: String @rules(apply: ["required", "string"])
    username: String @rules(apply: ["required", "string"])
    password: String @rules(apply: ["required", "string"])
    grantType: String @rules(apply: ["required", "string", "in:password"])
    provider: String @rules(apply: ["required", "string", "in:admins,users"])
  ): AuthTokenPayload! @field(resolver: "AuthToken@resolve")

  uploadFile(file: Upload!): String @field(resolver: "UploadFile@resolve")
}